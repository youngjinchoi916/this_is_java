객체 지향 프로그램이 나오기 오래전부터 Lisp, Scheme 같은 함수적 프로그래밍언어들이 있었는데, 학계를 제외하고 현업에서는 큰 호응을 받지 못했다.
최근들어 함수적 프로그래밍이 다시 부각되고 있는데, 병렬처리와 이벤트 지향 프로그래밍에 적합하기 때문이다.
자바 8부터 람다식을 지원하면서 기존 코드의 패턴이 많이 달라졌다.

람다식은 익명 함수를 생성하기 위한 식으로 객체 지향 언어 보다는 함수 지향 언어에 가깝다. 
객체 지향 프로그래밍에 익숙한 개발자들은 다소 혼란스러울 수 있지만, 
자바에서 람다식을 수용한 이유는 자바 코드가 매우 간결해지고, 컬렉션의 요소를 필터링하거나 매핑해서 원하는 결과를 쉽게 집계할 수 있기 때문이다.
람다식의 형태는 매개 변수를 가진 코드 블록이지만, 런타임 시에는 익명 구현 객체를 생성한다.

	[Runnable 인터페이스의 익명 구현 객체를 생성하는 전형적인 코드]
	Runnable runnable = new Runnable() {
		public void run() {
			...
		}
	}
	
	[위의 표현식을 람다식으로 변경]
	Runnable runnable = () -> { ... };
	
	람다식은 "(매개변수) -> {...실행코드...}" 형태로 작성되는데, 마치 함수 정의 형태를 띄고 있지만 런타임시에 인터페이스의 익명구현객체로 생성된다.
	어떤 인터페이스를 구현할 것인가는 대입되는 인터페이스가 무엇이냐에 따라 달라진다.
	
