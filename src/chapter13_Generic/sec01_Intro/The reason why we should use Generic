[왜 제네릭을 사용해야 하는가?]
	 - 제네릭은 클래스와 인터페이스, 그리고 메소드를 정의할 때 "타입을 파라미터"로 사용할 수 있도록 한다.
	 - 타입 파라미터는 코드 작성 시 구체적인 타입으로 대체되어 다양한 코드를 생성하도록 해준다.
	 
	 * 제네릭 사용시의 이점
	 	(1) 컴파일 시 강한 타입 체크를 할 수 있다.
	 		- 자바 컴파일러는 코드에서 잘못 사용된 타입 때문에 발생하는 문제점을 제거하기 위해 제네릭 코드에 대해 강한 타입 체크를 한다.
	 		   실행 시 타입 에러가 나는 것보다는 컴파일 시에 미리 타입을 강하게 체크해서 에러를 사전에 방지하는 것이 좋다.
	 	(2) 불필요한 타입변환(casting)을 제거한다.
	 		- 비제네릭 코드는 불필요한 타입 변환을 하기 때문에 프로그램 성능에 악영향을 미친다.
	 		
	 		[예시 1] 비제네릭 사용 시 타입변환 해야함.
	 			List list = new ArrayList();
	 			list.add("GLE coupe");		//List에 String 타입 -> Object 타입으로 자동타입변환되서 저장됨
	 			String carName = (String) list.get(0);   //list.get() 메소드는 리턴타입이 Object 여서 Listt에 저장된 객체를 String 변수로 받으려면 String으로 캐스팅해야한다.
	 		
	 		[예시 2] 제네릭 사용 시 타입변환 안해도 된다.
	 			List<String> list = new ArrayList<String>();
	 			list.add("GLE coupe");		//List에 String 타입만 저장 가능하다. -> 다른 타입은 List에 저장 불가능
	 			String carName = list.get(0);   //String만 저장된 List 이기 때문에 타입변환 없이 String 변수로 받을 수 있다.