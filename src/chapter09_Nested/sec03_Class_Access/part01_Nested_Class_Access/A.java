package chapter09_Nested.sec03_Class_Access.part01_Nested_Class_Access;

public class A {
	/*
	 * [바깥 필드와 메소드에서 멤버 클래스 사용시 제한]
	 * 	 - 멤버 클래스가 인스턴스 또는 정적으로 선언됨에 따라 바깥 클래스에서 멤버클래스(인스턴스, 정적)의 필드와 메소드에 사용 제한이 생긴다.
	 * 		-> 인스턴스 멤버 클래스 : 바깥 클래스의 인스턴스 필드의 초기값 선언이나 인스턴스 메소드에서 객체를 생성할 수 있다
	 * 							           (바깥 클래스의 정적필드의 초기값 선언, 정적 메소드에서 객체 생성 불가)
	 * 		-> 정적 멤버 클래스 : 바깥 클래스의 모든 필드의 초기값 선언, 모든 메소드에서 객체를 생성할 수 있다.
	 */
	
	//인스턴스 필드
	/*
	 * 인스턴스 멤버 클래스는 바깥클래스의 인스턴스 필드로 선언 가능
	 * 정적 멤버 클래스는 바깥클래스의 인스턴스 필드로 선언 가능
	 * 		=> 모든 멤버 클래스는 바깥 클래스의 인스턴스 필드로 선언 가능하다.
	 */
	B field1 = new B();               
	C field2 = new C();             
	
	//인스턴스 메소드
	void instanceMethod() {
		/*
		 * 인스턴스 멤버 클래스는 바깥클래스의 인스턴스 메소드에서 객체 생성 가능
		 * 정적 멤버 클래스는 바깥클래스의 인스턴스 메소드에서 객체 생성 가능
		 */
		B var1 = new B();
		C var2 = new C();
	}
	
	//정적 필드
	/*
	 * 인스턴스 멤버 클래스는 바깥클래스에서 정적 필드로 선언 불가능
	 * 정적 멤버 클래스는 바깥클래스에서 정적 필드로 선언 가능
	 *  	=> 정적 멤버 클래스는 바깥 클래스에서 인스턴스, 정적 필드 모두 선언 가능
	 *  	=> 인스턴스 멤버 클래스는 바깥 클래스에서 인스턴스 필드만 선언 가능
	 */
	//static B field3 = new B();
	static C field4 = new C();
	
	//정적 메소드
	static void staticMethod() {
		/*
		 * 인스턴스 멤버 클래스는 바깥클래스의 정적 메소드에서 객체 생성 불가능
		 * 정적 멤버 클래스는 바깥클래스의 정적 메소드에서 객체 생성 가능
		 */
		//B var1 = new B();
		C var2 = new C();
	}
	
	//인스턴스 멤버 클래스
	class B {}
	
	//정적 멤버 클래스
	static class C {}	

} //class