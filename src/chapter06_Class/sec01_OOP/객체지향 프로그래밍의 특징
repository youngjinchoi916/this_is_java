# 객체지향 프로그래밍의 특징
	1. 캡슐화 -> 접근제한자(public protected default private)
		객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말한다.
		외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
		왜? 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 필드와 메소드를 보호하기 위해
		
	2. 상속 -> 오버라이딩 vs 오버로딩
		상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 해준다.
		(1) 상속은 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고
		(2) 이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들기 때문에 반복된 코드의 중복을 줄여준다.
		(3) 상속은 상위 객체의 수정으로 모든 하위 객체들의 수정효과를 가져오므로 유지 보수 시간을 최소화 시켜 주기도 한다
	
	3. 다형성 -> 인터페이스, 자동타입변환
		같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
		다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.(자바는 다형성을 위해 부모 클래스 또는 인터페이스 타입 변환을 허용한다.) 
		"부모 타입에는 모든 자식객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다." -> 자동 타입 변환 허용
		
		* 다형성의 효과(장점) 
			-> 객체의 부품화가 가능하다. 
			     예를 들어, 자동차를 설계할 때 인터페이스 타입을 적용했다면 이 인터페이스를 구현한 실제 타이어들은 어떤 것이든 상관없이 장착(대입)가능하다.
			     즉, 자동차 타이어의 규격(인터페이스)을 정해 놓으면, 그 규격에 맞는(인터페이스를 구현한 모든 구현 객체) 모든 타이어 들이 교체될 수 있다.
		
# 객체와 클래스
	- 클래스 : 객체를 정의하는 설계도. 즉 클래스에는 객체를 생성하기 위한 필드, 메소드 들이 정의 되어 있다.
	               유사한 특성을 지닌 객체들의 속성을 묶어 놓은 집합체
	               ex) 학교의 박나래, 장도연, 기안84,,, -> 공통된 특성 : 학생(클래스)
	- 객체 : 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스라고 한다. 하나의 클래스로 여러 개의 인스턴스를 만들수 있다.
	- 클래스 -> 객체 : 인스턴스화 과정
	
# 클래스 선언(명명 규칙)
	- 하나 이상의 문자로 이루어져야 한다. ex) Car, SportsCar
	- 첫 번째 글자는 숫자가 올 수 없다. ex) 3Car(x)
	- $, _ 이외의 특수 문자 사용 불가
	- 자바 키워드 사용 불가