애플리케이션을 개발하다 보면 다수의 객체를 저장해 두고 필요할 때마다 꺼내서 사용하는 경우가 많다.
	(1) 배열
		- 배열은 쉽게 생성하고 사용할 수 있지만, 저장할 수 있는 객체 수(배열의 크기)가 배열을 생성할 때 결정 된다. 
		    -> 불특정 다수의 객체를 저장하기에는 문제가 있다. 물론 배열의 크기를 크게 생성하면 되지만, 이는 좋은 방법이 될 수 없다.
		- 객체의 또 다른 문제점은 객체를 삭제했을 때 해당 인덱스가 비게 되어 낱알이 듬성듬성 빠진 옥수수가 될 수 있다. 
			-> 새로운 객체를 저장하려면 어디가 비어있는지 확인하는 코드도 필요하다. 
		- 자바는 배열의 이러한 문제점을 해결하고 널리 알려져 있는 자료구조를 바탕으로 객체들을 효율적으로 추가, 삭제, 검색할 수 있도록 
			java.util 패키지에 컬렉션과 관련된 인터페이스와 클래스들을 포함시켜 놓았다.
	(2) Collection 
		- 컬렉션이란 사전적 의미로 요소를 수집해서 저장하는 것을 말하는데, 자바 컬렉션은 객체를 수집해서 저장하는 역할을 한다.
		- 컬렉션의 주요 인터페이스로는 List, Set, Map이 있다.
		
		
		[인터페이스 분류]			[특징]									[구현클래스]
		---------------------------------------------------------------------------------------------------------------
		List							순서를 유지하고 저장					ArrayList, Vector, LinkedList
										중복 저장 가능
		
		Set							순서를 유지하지 않고 저장			HashSet, TreeSet
										중복 저장 안됨
										
		Map							키와 값의 쌍으로 저장				HashMap, HashTable, TreeMap, Properties
										값은 중복 저장 가능
										
										
		* List
			- List 컬렉션은 객체를 일렬로 늘어놓은 구조를 가지고 있다. 
			   객체를 인덱스로 관리하기 때문에 객체를 저장하면 자동 인덱스가 부여되고 인덱스로 객체를 검색, 삭제할 수 있는 기능을 제공한다.
			- List는 객체 자체를 저장하는 것이 아니라 객체의 번지를 참조한다.
			   동일한 객체를 중복 저장할 수 있는데, 이 경우 동일한 번지가 참조된다. null도 저장 가능한데 이 경우에 해당 인덱스는 객체를 참조하지 않는다.
			   
			   